#!/bin/bash

echo "üßº Cleaning previous JMeter and SonarQube outputs..."
rm -rf results.jtl jmeter.log jmeter-html-report

echo "üöÄ Starting all services with Docker Compose..."
docker compose -f docker-compose.yml -f docker-compose.sonar.yml up -d

echo "‚è≥ Waiting for services to be ready..."
echo "üü° Waiting 60 seconds for databases to initialize..."
sleep 60

echo "üîÑ Waiting 30 more seconds for FastAPI app to connect to database..."
sleep 30

# Check SonarQube accessibility
echo "üîç Checking SonarQube accessibility..."
if curl -s "http://localhost:9000" > /dev/null 2>&1; then
    echo "‚úÖ SonarQube is accessible!"
else
    echo "‚ö†Ô∏è  SonarQube might not be fully ready, but continuing..."
    echo "üìç You can check SonarQube manually at http://localhost:9000"
fi

# Check FastAPI app accessibility
echo "üîç Checking FastAPI app accessibility..."
if curl -s "http://localhost:8000" > /dev/null 2>&1; then
    echo "‚úÖ FastAPI app is accessible!"
    echo "üîç Testing FastAPI health endpoint..."
    curl -s "http://localhost:8000/docs" > /dev/null && echo "‚úÖ FastAPI docs accessible" || echo "‚ö†Ô∏è  FastAPI docs not accessible"
else
    echo "‚ö†Ô∏è  FastAPI app is not accessible, checking logs..."
    echo "üìã FastAPI Container Logs:"
    docker logs fastapi_app --tail 10
fi

echo "üß™ Running JMeter load test..."
jmeter -n -t tests/test.jmx -l results.jtl -j jmeter.log

# Generate HTML report if JMeter supports it
if jmeter --help | grep -q "\-e"; then
    echo "üìà Generating HTML report..."
    jmeter -g results.jtl -o jmeter-html-report
    echo "üìä HTML report generated at jmeter-html-report/index.html"
else
    echo "üìã HTML report generation not supported in this JMeter version"
    echo "üìä View results in results.jtl"
fi

# Check JMeter results
echo "üìä JMeter Test Summary:"
if [ -f results.jtl ]; then
    TOTAL_REQUESTS=$(tail -n +2 results.jtl | wc -l)
    ERRORS=$(tail -n +2 results.jtl | awk -F',' '$8=="false" {count++} END {print count+0}')
    SUCCESS_RATE=$(echo "scale=2; ($TOTAL_REQUESTS - $ERRORS) * 100 / $TOTAL_REQUESTS" | bc 2>/dev/null || echo "N/A")
    echo "   ‚Ä¢ Total Requests: $TOTAL_REQUESTS"
    echo "   ‚Ä¢ Errors: $ERRORS"
    echo "   ‚Ä¢ Success Rate: $SUCCESS_RATE%"
else
    echo "   ‚Ä¢ No results file found"
fi

echo "üßπ Removing previous SonarScanner container if it exists..."
docker rm -f sonar_scanner > /dev/null 2>&1 || true

echo "üîç Running SonarScanner analysis..."
echo "‚ö†Ô∏è  Note: SonarScanner may need initial setup in SonarQube web interface"
docker compose -f docker-compose.yml -f docker-compose.sonar.yml run --rm sonar_scanner || echo "‚ö†Ô∏è  SonarScanner failed - may need manual setup"

echo ""
echo "‚úÖ Analysis complete!"
echo ""
echo "üìä Results Summary:"
echo "   ‚Ä¢ JMeter Results: results.jtl"
echo "   ‚Ä¢ JMeter Log: jmeter.log"
echo "   ‚Ä¢ HTML Report: jmeter-html-report/index.html"
echo "   ‚Ä¢ SonarQube UI: http://localhost:9000 (admin/admin)"
echo "   ‚Ä¢ FastAPI App: http://localhost:8000"
echo "   ‚Ä¢ FastAPI Docs: http://localhost:8000/docs"
